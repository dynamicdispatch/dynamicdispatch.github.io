<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

   <title>dynamicDispatch</title>
   <subtitle>Random ObjC, Swift and Xcode fun</subtitle>
   <link href="http://dynamicdispatch.io/feed.xml" rel="self"/>
   <link href="http://dynamicdispatch.io/"/>
   <updated>2017-09-08T13:38:38-07:00</updated>
   <id>http://dynamicdispatch.io/</id>
   <author>
      <name>dynamicDispatch</name>
   </author>
   <icon>/img/logo.png</icon>
   <category term="programming"/>
   <category term="ios"/>
   <category term="swift"/>
   <category term="objective-c"/>
   <category term="software"/>
   <category term="mobile"/>

   
   <entry>
      <title>__cxa_throw and fonts</title>
      <subtitle></subtitle>
      <link href="http://dynamicdispatch.io/blog/cxa-throw-and-fonts/" />
      <id>http://dynamicdispatch.io/blog/cxa-throw-and-fonts</id>

      <published>2017-08-18T00:00:00-07:00</published>
      
      <updated>2017-08-18T00:00:00-07:00</updated>
      

      <summary>&lt;p&gt;Sometimes when working in Xcode with the &lt;code class=&quot;highlighter-rouge&quot;&gt;All Exceptions&lt;/code&gt; breakpoint turned on, when starting the app it pauses on the &lt;code class=&quot;highlighter-rouge&quot;&gt;__cxa_throw&lt;/code&gt; symbol, but we can continue without crashing. This post will cover one of the common causes, missing font entitlements.&lt;/p&gt;

</summary>
      <content type="html"></content>
   </entry>
   
   <entry>
      <title>godbolt</title>
      <subtitle></subtitle>
      <link href="http://dynamicdispatch.io/blog/Godbolt/" />
      <id>http://dynamicdispatch.io/blog/Godbolt</id>

      <published>2017-08-17T00:00:00-07:00</published>
      
      <updated>2017-08-17T00:00:00-07:00</updated>
      

      <summary>&lt;p&gt;The popular compiler explorer tool godbolt&lt;sup id=&quot;fnref:godbolt&quot;&gt;&lt;a href=&quot;#fn:godbolt&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; has added support for Swift language. Godbolt letâ€™s you enter some code in a browser and shows the assembly output. It shows off the power of the LLVM optimization passes:&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:godbolt&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://godbolt.org&quot;&gt;godbolt.org&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:godbolt&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</summary>
      <content type="html"></content>
   </entry>
   
   <entry>
      <title>withoutActuallyEscaping</title>
      <subtitle></subtitle>
      <link href="http://dynamicdispatch.io/blog/withoutActuallyEscaping/" />
      <id>http://dynamicdispatch.io/blog/withoutActuallyEscaping</id>

      <published>2017-08-02T00:00:00-07:00</published>
      
      <updated>2017-08-02T00:00:00-07:00</updated>
      

      <summary>&lt;p&gt;In Swift 3, the default attribute for closures is now &lt;code class=&quot;highlighter-rouge&quot;&gt;@noescape&lt;/code&gt; (with the keyword being deprecated), we now have to specify closures that escape from a function as &lt;code class=&quot;highlighter-rouge&quot;&gt;@escaping&lt;/code&gt;. There is a standard library function &lt;code class=&quot;highlighter-rouge&quot;&gt;withoutAcutallyEscaping&lt;/code&gt; &lt;sup id=&quot;fnref:doc&quot;&gt;&lt;a href=&quot;#fn:doc&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Allows a nonescaping closure to temporarily be used as if it were allowed to escape.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:doc&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/swift/2827967-withoutactuallyescaping&quot;&gt;https://developer.apple.com/documentation/swift/2827967-withoutactuallyescaping&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:doc&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</summary>
      <content type="html"></content>
   </entry>
   
   <entry>
      <title>Demangling Swift Names</title>
      <subtitle></subtitle>
      <link href="http://dynamicdispatch.io/blog/demangling-swift-names/" />
      <id>http://dynamicdispatch.io/blog/demangling-swift-names</id>

      <published>2017-07-06T00:00:00-07:00</published>
      
      <updated>2017-07-06T00:00:00-07:00</updated>
      

      <summary>&lt;p&gt;When looking at stack traces, or disassembling code you end up with unreadable mangled Swift names like &lt;code class=&quot;highlighter-rouge&quot;&gt;_T023UITestInstrumentsUITestsAAC11testExampleyyF&lt;/code&gt;. Xcode provides a tool to demangle these into the original type signature.&lt;/p&gt;

</summary>
      <content type="html"></content>
   </entry>
   

</feed>
